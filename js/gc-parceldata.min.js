"use strict";const gcParcelViewLocales={en:{options:{title:"Parcel Details"},fields:{id:"ID",crop:"Crop",entity:"Entity",name:"Name",area:"Area",planting:"Seeding",harvest:"Harvest",userdata:"User data",promotion:"Promotion"},pagination:{title:"Pagination",of:"of",previous:"Previous",next:"Next",start:"Start",end:"End"}},de:{options:{title:"Felddetails"},fields:{id:"Nr",crop:"Fruchtart",entity:"Entität",name:"Name",area:"Fläche",planting:"Pflanzung",harvest:"Ernte",userdata:"Zusatzdaten",promotion:"Demo"},pagination:{title:"Navigation",of:"von",previous:"Vorherige",next:"Nächste",start:"Anfang",end:"Ende"}},lt:{options:{title:"Lauko riba"},fields:{id:"ID",crop:"Pasėlis",entity:"Subjektas",name:"Pavadinimas",area:"Plotas",planting:"Pasėta",harvest:"Derlius nuimtas",userdata:"User data",promotion:"Promotion"},pagination:{title:"Paginacija",of:"of",previous:"Previous",next:"Next",start:"Start",end:"End"}}};Vue.component("gc-parceldata",{props:{gcWidgetId:{type:String,default:"parceldata1",required:!0},gcApikey:{type:String,default:"39553fb7-7f6f-4945-9b84-a4c8745bdbec"},gcHost:{type:String,default:"geocledian.com"},gcProxy:{type:String,default:void 0},gcApiBaseUrl:{type:String,default:"/agknow/api/v3"},gcApiSecure:{type:Boolean,default:!0},gcInitialLoading:{type:Boolean,default:!0},gcParcels:{type:Array,default:function(){return[]}},gcVisibleParcelIds:{type:String,default:""},gcSelectedParcelId:{type:String,default:""},gcAvailableFields:{type:String,default:"parcelId,name,crop,entity,planting,harvest,area,userdata,promotion"},gcLayout:{type:String,default:"vertical"},gcAvailableOptions:{type:String,default:"widgetTitle,pagination"},gcWidgetCollapsed:{type:Boolean,default:!1},gcLanguage:{type:String,default:"en"},gcFilterString:{type:String,default:""},gcLimit:{type:Number,default:250},gcOffset:{type:Number,default:0}},template:'<div :id="this.gcWidgetId" class="">\n\n                <p :class="[\'gc-options-title\', \'is-size-6\', \'is-inline-block\', gcWidgetCollapsed ? \'is-grey\' : \'is-orange\']"  \n                  v-on:click="toggleParcelData" \n                  v-show="availableOptions.includes(\'widgetTitle\')">\n                    \x3c!--i class="fas fa-th fa-sm"></i --\x3e {{ $t(\'options.title\')}}\n                  <i :class="[!gcWidgetCollapsed ? \'\': \'is-active\', \'fas\', \'fa-angle-down\', \'fa-sm\']"></i>\n                </p>\n\n                \x3c!-- parcel data container --\x3e\n                <div :class="[!gcWidgetCollapsed ? \'\': \'is-hidden\', layoutCSSMap[\'alignment\'][gcLayout]]" style="width: 100%;">\n                  <div :class="[\'field\', \'gc-parcel-field-\'+gcLayout]" v-show="availableFields.includes(\'parcelId\')">\n                    <label class="label is-grey is-small"> {{ $t(\'fields.id\') }} - {{ $t(\'fields.name\') }} </label>\n                    <div class="control">\n                      <div class="select is-small" style="max-width: 15em;" v-if="currentParcel">\n                        <select v-model="currentParcel">\n                          <option v-for="item in parcels" v-bind:value="item">\n                            {{  item.parcel_id + "  -  " + item.name}}\n                          </option>\n                        </select>\n                      </div>\n                    </div>\n                  </div>\n                  <div :class="[\'field\', \'gc-parcel-field-\'+gcLayout]" v-show="availableFields.includes(\'name\')">\n                    <label class="label is-grey is-small has-text-left"> {{ $t(\'fields.name\') }} </label>\n                    <div class="control">\n                      <span class="input is-static is-small"\n                            v-if="parcels.length > 0 && currentParcel"> {{ currentParcel.name}}</span>\n                    </div>\n                  </div>\n                  <div :class="[\'field\', \'gc-parcel-field-\'+gcLayout]" v-show="availableFields.includes(\'entity\')">\n                    <label class="label is-grey is-small"> {{ $t(\'fields.entity\') }} </label>\n                    <div class="control"><span class="input is-static is-small" \n                          v-if="parcels.length > 0 && currentParcel">{{ currentParcel.entity }}</span>\n                    </div>\n                  </div>\n                  <div :class="[\'field\', \'gc-parcel-field-\'+gcLayout]" v-show="availableFields.includes(\'crop\')">\n                    <label class="label is-grey is-small"> {{ $t(\'fields.crop\') }} </label>\n                    <div class="control"><span class="input is-static is-small" \n                          v-if="parcels.length > 0 && currentParcel">{{ currentParcel.crop }}</span>\n                    </div>\n                  </div>\n                  <div :class="[\'field\', \'gc-parcel-field-\'+gcLayout]" v-show="availableFields.includes(\'planting\')">\n                    <label class="label is-grey is-small"> {{ $t(\'fields.planting\') }} </label>\n                    <div class="control"><span class="input is-static is-small" \n                          v-if="parcels.length > 0 && currentParcel">{{ currentParcel.planting }}</span>\n                    </div>\n                  </div>\n                  <div :class="[\'field\', \'gc-parcel-field-\'+gcLayout]" v-show="availableFields.includes(\'harvest\')">\n                    <label class="label is-grey is-small"> {{ $t(\'fields.harvest\') }} </label>\n                    <div class="control"><span class="input is-static is-small" \n                          v-if="parcels.length > 0 && currentParcel">{{ currentParcel.harvest }}</span>\n                    </div>\n                  </div>\n                  <div :class="[\'field\', \'gc-parcel-field-\'+gcLayout]" v-show="availableFields.includes(\'area\')">\n                    <label class="label is-grey is-small"> {{ $t(\'fields.area\') }} </label>\n                    <div class="control"><span class="input is-static is-small" \n                          v-if="parcels.length > 0 && currentParcel">{{ currentParcel.area }}</span>\n                    </div>\n                  </div>\n                  <div :class="[\'field\', \'gc-parcel-field-\'+gcLayout]" v-show="availableFields.includes(\'userdata\')">\n                  <label class="label is-grey is-small"> {{ $t(\'fields.userdata\') }} </label>\n                  <div class="control"><span class="input is-static is-small" \n                        v-if="parcels.length > 0 && currentParcel">{{ JSON.stringify(currentParcel.userdata) }}</span>\n                  </div>\n                </div>\n                  <div :class="[\'field\', \'gc-parcel-field-\'+gcLayout]" v-show="availableFields.includes(\'promotion\')">\n                    <label class="label is-grey is-small"> {{ $t(\'fields.promotion\') }} </label>\n                    <div class="control"><span class="input is-static is-small" \n                          v-if="parcels.length > 0 && currentParcel">{{ currentParcel.promotion }}</span>\n                    </div>\n                  </div>\n\n                  \x3c!-- pagination --\x3e\n                  <div :class="[\'field\', \'gc-parcel-field-\'+gcLayout]" v-show="availableOptions.includes(\'pagination\')">\n                    <label class="label is-grey is-small"> {{ $t(\'pagination.title\') }} </label>\n                    <div class="control">\n                      <nav class="pagination is-small is-centered" role="navigation" aria-label="pagination">\n                        <button class="button pagination-previous is-light is-orange" v-on:click="setPaginationStart()" v-bind:title="$t(\'pagination.start\')">\n                          <i class="fas fa-fast-backward"></i>\n                        </button>\n                        <button id="btnPagePrev" class="button pagination-previous is-light is-orange" v-on:click="setPaginationOffset(-pagingStep)" v-bind:title="$t(\'pagination.previous\') + \' \' + pagingStep">\n                          <i class="fas fa-step-backward"></i>\n                        </button>\n                        <button id="btnPageNext" class="button pagination-next is-light is-orange" v-on:click="setPaginationOffset(pagingStep)" v-bind:title="$t(\'pagination.next\') + \' \' + pagingStep">\n                          <i class="fas fa-step-forward"></i>\n                        </button>\n                        <button class="button pagination-next is-light is-orange" v-on:click="setPaginationEnd();" v-bind:title="$t(\'pagination.end\')">\n                          <i class="fas fa-fast-forward"></i>\n                        </button>\n                        <ul v-if="(total_parcel_count - offset) < pagingStep" id="parcel_paging" \n                            style="flex-wrap: nowrap !important; -ms-flex-wrap: nowrap !important" \n                            class="button pagination-list has-text-grey is-small">\n                          <li><span class="">{{offset}}&nbsp;</span></li>\n                          <li><span class=""> - </span></li>\n                          <li><span class="">&nbsp;{{total_parcel_count}}&nbsp;</span></li>\n                          <li><span class=""> {{ $t(\'pagination.of\')}} {{total_parcel_count}}</span></li>\n                        </ul>\n                        <ul v-else id="parcel_paging" \n                            style="flex-wrap: nowrap !important; -ms-flex-wrap: nowrap !important" \n                            class="button pagination-list has-text-grey is-small">\n                          <li><span class="">{{offset}}&nbsp;</span></li>\n                          <li><span class=""> - </span></li>\n                          <li><span class="">&nbsp;{{(offset + pagingStep)}}&nbsp;</span></li>\n                          <li><span class=""> {{ $t(\'pagination.of\')}} {{total_parcel_count}}</span></li>\n                        </ul>\n                    </nav>\n                  \x3c!-- <div class="field-label is-small has-text-left pagination-link" >Total: {{total_parcel_count}}</div> --\x3e\n                  </div>  \n                  \x3c!-- pagination --\x3e\n                \n                </div> \x3c!-- parcel container --\x3e\n\n            </div>\x3c!-- gcWidgetId --\x3e',data:function(){return console.debug("parceldata! - data()"),{total_parcel_count:0,pagingStep:250,promotion:void 0,crop:"",entity:"",name:"",planting:"",harvest:"",layoutCSSMap:{alignment:{vertical:"is-inline-block",horizontal:"is-flex"}},isloading:!1}},i18n:{locale:this.currentLanguage,messages:gcParcelViewLocales},created:function(){console.debug("parceldata! - created()"),this.changeLanguage()},mounted:function(){console.debug("parceldata! - mounted()");try{this.changeLanguage()}catch(ex){}},computed:{apiKey:{get:function(){return this.gcApikey}},apiHost:{get:function(){return this.gcHost}},apiBaseUrl:{get:function(){return this.gcApiBaseUrl}},apiSecure:{get:function(){return this.gcApiSecure}},apiMajorVersion:{get(){return"/agknow/api/v3"===this.apiBaseUrl?3:"/agknow/api/v4"===this.apiBaseUrl?4:void 0}},filterString:{get:function(){return this.gcFilterString}},limit:{get:function(){return this.gcLimit}},pagingStep:{get:function(){return this.limit}},offset:{get:function(){return this.gcOffset},set:function(newValue){this.$root.$emit("offsetChange",newValue)}},parcels:{get:function(){return console.debug("gc-parceldata - parcels() getter"),this.gcParcels},set:function(newValue){console.debug("gc-parceldata - parcels setter"),this.$root.$emit("parcelsChange",newValue)}},visibleParcelIds:{get:function(){return this.gcVisibleParcelIds},set:function(newValue){this.$root.$emit("visibleParcelIdsChange",newValue)}},selectedParcelId:{get:function(){return this.gcSelectedParcelId},set:function(newValue){this.$root.$emit("selectedParcelIdChange",parseInt(newValue))}},availableFields:{get:function(){return this.gcAvailableFields.split(",")}},availableOptions:{get:function(){return this.gcAvailableOptions.split(",")}},currentLanguage:{get:function(){return this.gcLanguage}},currentParcel:{get:function(){return this.selectedParcelId>0?this.parcels.filter(p=>p.parcel_id+""==this.selectedParcelId+"")[0]:this.parcels[0]},set:function(newValue){console.debug("currentParcel setter"),console.debug(newValue),newValue&&(this.selectedParcelId=newValue.parcel_id)}}},watch:{parcels(newValue,oldValue){},currentParcel(newValue,oldValue){this.selectedParcelId=newValue.parcel_id,console.debug("currentParcelChange - gc-parceldata"),console.debug(newValue),this.$root.$emit("phStartdateChange",newValue.planting),this.$root.$emit("phEnddateChange",newValue.harvest),this.$root.$emit("startdateChange",newValue.planting),this.$root.$emit("enddateChange",newValue.harvest)},currentLanguage(newValue,oldValue){this.changeLanguage()},selectedParcelId(newValue,oldValue){this.getParcelsAttributes(newValue)},filterString(newValue,oldValue){console.debug("gc-parceldata - filterString changed"),console.debug(newValue),this.getParcelTotalCount(newValue)},offset(newValue,oldValue){this.getParcelTotalCount(this.filterString)}},methods:{getApiUrl:function(endpoint){let protocol="http";return this.apiSecure&&(protocol+="s"),this.gcProxy?protocol+"://"+this.gcProxy+this.apiBaseUrl+endpoint:protocol+"://"+this.gcHost+this.apiBaseUrl+endpoint+"?key="+this.apiKey},getParcelTotalCount:function(filterString){const endpoint="/parcels";let params;params=filterString?filterString+"&count=True":"&count=True",console.debug(params);let xmlHttp=new XMLHttpRequest,async=!0;console.debug("getParcelTotalCount()"),console.debug("GET "+this.getApiUrl(endpoint)+params),xmlHttp.onreadystatechange=function(){if(4==xmlHttp.readyState){console.debug(xmlHttp.responseText);var tmp=JSON.parse(xmlHttp.responseText);if("count"in tmp){if(this.total_parcel_count=tmp.count,this.total_parcel_count<this.pagingStep?this.pagingStep=this.total_parcel_count:this.pagingStep=250,0==this.total_parcel_count)return void(this.parcels=[]);this.getAllParcels(this.offset,filterString)}}}.bind(this),xmlHttp.open("GET",this.getApiUrl(endpoint)+params,!0),xmlHttp.send()},getAllParcels:function(offset,filterString){let limit;const endpoint="/parcels";let params="&limit="+this.limit;offset&&(params=params+"&offset="+offset),filterString&&(params+=filterString);let xmlHttp=new XMLHttpRequest,async=!0;console.debug("getAllParcels()"),console.debug("GET "+this.getApiUrl(endpoint)+params),xmlHttp.onreadystatechange=function(){if(4==xmlHttp.readyState){var tmp=JSON.parse(xmlHttp.responseText);if("key is not authorized"==tmp.content)return;var internalParcels=[];if(0==tmp.content.length)return;for(let i=0;i<tmp.content.length;i++){let item=tmp.content[i];internalParcels.push(item)}this.parcels=internalParcels,this.selectedParcelId>0?(console.debug(internalParcels.find(p=>p.parcel_id===this.selectedParcelId)),void 0!==this.parcels.find(p=>p.parcel_id===this.selectedParcelId)&&(console.debug("setting first parcel as current parcel id!"),this.selectedParcelId=internalParcels[0].parcel_id)):(console.debug(this.parcels),console.debug("setting first parcel as current parcel id!"),this.selectedParcelId=internalParcels[0].parcel_id),console.debug("selected parcel id: "+this.selectedParcelId),this.getParcelsAttributes(this.selectedParcelId)}}.bind(this),xmlHttp.open("GET",this.getApiUrl(endpoint)+params,!0),xmlHttp.send()},getParcelsAttributes(parcel_id){if(!parcel_id||parcel_id<0)return;const endpoint="/parcels/"+parcel_id;console.debug("getParcelsAttributes()"),console.debug("GET "+this.getApiUrl(endpoint)),axios({method:"GET",url:this.getApiUrl(endpoint)}).then(function(response){if(200===response.status){var tmp=response.data,row=this.currentParcel;let obj,resultNotEmpty;3===this.apiMajorVersion&&(console.debug(this.apiMajorVersion),resultNotEmpty=tmp.content.length>0,obj=tmp.content[0]),4===this.apiMajorVersion&&(obj=tmp.content,resultNotEmpty=void 0!==obj),resultNotEmpty&&(console.debug(row),Vue.set(row,"area",obj.area),Vue.set(row,"planting",obj.planting),Vue.set(row,"harvest",obj.harvest),Vue.set(row,"startdate",obj.startdate),Vue.set(row,"enddate",obj.enddate),Vue.set(row,"promotion",obj.promotion))}else console.log(response)}.bind(this)).catch(err=>{console.log("err= "+err)})},setPaginationOffset(offset){console.debug("change: "+offset),console.debug("current val: "+this.offset);let newOffset=this.offset+offset;newOffset>=0?(console.debug("new offset: "+newOffset),newOffset<=this.total_parcel_count?(console.debug("setting offset"),this.offset+=offset):(console.debug("total_parcel_count reached!"),console.debug("total: "+this.total_parcel_count),console.debug("offset: "+this.offset))):(console.debug("Min_offset reached!"),this.offset=0,console.debug(this.offset))},setPaginationStart(){this.isloading=!0,this.offset=0},setPaginationEnd(){this.isloading=!0,this.offset=this.total_parcel_count-this.pagingStep},toggleParcelData(){this.gcWidgetCollapsed=!this.gcWidgetCollapsed},setCurrentParcelId(event){},changeLanguage(){this.$i18n.locale=this.currentLanguage},formatDecimal(decimal,numberOfDecimals){var factor=100;return isNaN(parseFloat(decimal))?NaN:(1==numberOfDecimals&&(factor=10),2==numberOfDecimals&&(factor=100),3==numberOfDecimals&&(factor=1e3),4==numberOfDecimals&&(factor=1e4),5==numberOfDecimals&&(factor=1e5),Math.ceil(decimal*factor)/factor)}}});